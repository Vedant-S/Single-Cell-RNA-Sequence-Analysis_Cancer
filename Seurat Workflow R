---
title: "Seurat Tutorial"
output: html_notebook
---

```{r Libraries}
library(Seurat)
library(dplyr)
install.packages("umap")
```

```{r Load Dataset}
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "../filtered_gene_bc_matrices/hg19/")
```

```{r Seurat Object}
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc
```
```{r QC Metrics}
#stash QC stats
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
# Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
```
```{r Feature Comparison}
# FeatureScatter
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(plot1, plot2))
```
```{r Data Cleaning}
# removing outliers (filter cellswith unique feature counts over 2,500 or less than 200 or >5% mitochondrial counts)
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)

#Normalizing
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
```
```{r Feature Selection}
#Important Feature Selection
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 10)

```
```{r Feature Visualization}
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
CombinePlots(plots = list(plot1, plot2))
```

```{r Feature Scaling}
#Scaling Features (Mean = 0, Variance = 1)
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
```
```{r Principal Component Analysis}
#PCA
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
View(pbmc.data)
```
```{r PC Visualization}
#Principal Components (5)
print(pbmc[["pca"]], dims = 1:5, nfeatures = 5)
```


```{r PC Visualization Contributions}
#Viewing contributions of features to PCs
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
```


```{r PC Visualization Dimensional Heat Map}
#viewing PCs with Dimensional Heat Map
DimHeatmap(pbmc, dims = 1:5, cells = 500, balanced = TRUE)
```
```{r PC Selection}
# Choosing important PCs (takes about 4 minutes)
pbmc <- JackStraw(pbmc, num.replicate = 100)
pbmc <- ScoreJackStraw(pbmc, dims = 1:20)
```

```{r View Principal Component Selections}
JackStrawPlot(pbmc, dims = 1:15)
```


```{r Cell Clustering}
#CLustering cells
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.5)
```

```{r UMAP Clustering}
#Running UMAP
pbmc <- RunUMAP(pbmc, dims = 1:10)
DimPlot(pbmc, reduction = "umap")
```

```{r Clustering Markers Experimentation}
# find all markers of cluster 1
cluster1.markers <- FindMarkers(pbmc, ident.1 = 1, min.pct = 0.25)


# find all markers distinguishing cluster 5 from clusters 0 and 3
cluster5.markers <- FindMarkers(pbmc, ident.1 = 5, ident.2 = c(0, 3), min.pct = 0.25)

```


```{r Clustering Markers}
# find markers for every cluster compared to all remaining cells, report only the positive ones
pbmc.markers <- FindAllMarkers(pbmc, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
pbmc.markers %>% group_by(cluster) %>% top_n(n = 2, wt = avg_logFC)
```

```{r View Cluster Markers}
head(cluster1.markers, n = 5)
head(cluster5.markers, n = 5)
head(pbmc.markers, n = 5)
```

```{r Cluster IDs}
new.cluster.ids <- c("Naive CD4 T", "Memory CD4 T", "CD14+ Mono", "B", "CD8 T", "FCGR3A+ Mono",
"NK", "DC", "Platelet")
names(new.cluster.ids) <- levels(pbmc)
```

```{r Final Cell Differentiation}
pbmc <- RenameIdents(pbmc, new.cluster.ids)
DimPlot(pbmc, reduction = "umap", label = TRUE, pt.size = 0.5) + NoLegend()
```

